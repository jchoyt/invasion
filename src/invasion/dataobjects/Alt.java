package invasion.dataobjects;

import org.json.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import java.io.*;
import java.util.*;
import java.sql.*;
import invasion.util.*;
import invasion.ui.NaughtyException;

/**
 * Alt generated by hbm2java
 */
public class Alt  implements java.io.Serializable {

    //{{{ Logging
    public final static String KEY = Alt.class.getName();
    public final static Logger log = Logger.getLogger( KEY );
    // static{log.setLevel(Level.FINER);}
    //}}}

    //{{{ members
    private int id=-1;
    private int location=-1;
    private int locationType = -1;
    private String name;
    private int ap = 50;
    private int apmax = 50;
    private int ip = 0;
    private int cp = 0;
    private int hp = 50;
    private int hpmax = 50;
    private int speciality;
    private int equippedWeapon = -1;
    private boolean autoReload = true;

    public final static int ENERGYPISTOL = 26;
    public final static int ENERGYPACK = 28;
    //}}}

    //{{{ Constructors
    private Alt() {
    }

    /**
     *  create a new character
     */
    public Alt( String username, String name, int speciality, int skill, int station )
    {
        this.name = name;
        this.speciality = speciality;
        // check that the name isn't used
        String query = "select * from alt where name=?";
        InvasionConnection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try
        {
            conn = new InvasionConnection();
            ps = conn.prepareStatement(query);
            ps.setString(1,name);
            rs = ps.executeQuery();
            if(rs.next())
            {
                throw new RuntimeException("that name is used.");
            }
            DatabaseUtility.close(rs);
            DatabaseUtility.close(ps);

            // assign spawn location
            query = "select * from location where typeid=31 and station=? order by random() limit 1";
            ps = conn.prepareStatement(query);
            ps.setInt(1,station);
            rs = ps.executeQuery();
            int loc;
            if(rs.next())
            {
                loc = rs.getInt(1);
            }
            else
            {
                log.warning("Didn't find a cloning facility in station " + station);
                throw new RuntimeException("Don't mess with the inputs.");
            }
            DatabaseUtility.close(rs);
            DatabaseUtility.close(ps);

            //get the next alt id


            // save him to the database
            query = "insert into alt ( id, username, name, location, speciality ) values ( DEFAULT, ?,?,?,? ) returning id";
            ps = conn.prepareStatement(query);
            ps.setString(1,username);
            ps.setString(2,name);
            ps.setInt(3,loc);
            ps.setInt(4,speciality);
            rs = ps.executeQuery();
            rs.next();
            id = rs.getInt(1);
            DatabaseUtility.close(rs);
            DatabaseUtility.close(ps);

            //now new guy has a location, give them stuff
            new Item( conn, ENERGYPISTOL, id);
            new Item( conn, ENERGYPISTOL, id);
            new Item( conn, ENERGYPACK, id);
            new Item( conn, ENERGYPACK, id);
            new Item( conn, ENERGYPACK, id);
            new Item( conn, ENERGYPACK, id);
            new Item( conn, ENERGYPACK, id);
            new Item( conn, ENERGYPACK, id);
        }
        catch(SQLException e)
        {
            log.throwing( KEY, "Exception creating character " + name, e);
            throw new RuntimeException(e);
        }
        finally
        {
            DatabaseUtility.close(rs);
            DatabaseUtility.close(ps);
            conn.close();
        }
    }

    /**
     *  Retrieve an existing character from the database but only load the information necessary for Whatzit.
     */
    public Alt(String username, int id) {
        log.entering(KEY, "Retrieve from db", username + "|" + id);
        String query = "select * from alt a join location l on (a.location = l.id) where a.id=? and a.username=?";
        InvasionConnection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try
        {
            conn = new InvasionConnection();
            ps = conn.prepareStatement(query);
            ps.setInt(1,id);
            ps.setString(2, username);
            rs = ps.executeQuery();
            while(rs.next())
            {
                this.name = rs.getString("name");
                this.id = rs.getInt("id");
                this.equippedWeapon=rs.getInt("equippedweapon");
                this.autoReload = rs.getBoolean("autoreload");
                this.location = rs.getInt("location");
                this.locationType = rs.getInt("typeid");
            }
            log.finer("in Alt, id is " + id);
            DatabaseUtility.close(rs);
            DatabaseUtility.close(ps);
            if( id == -1 )
            {
                log.severe("Did not find an alt number " + id + " for user " + username);
                throw new NaughtyException("Did not find an alt number " + id + " for user " + username);
            }
        }
        catch(SQLException e)
        {
            log.throwing( KEY, "looks like " + username + " is messing with the inputs", e);
            throw new NaughtyException(e);
        }
        finally
        {
            DatabaseUtility.close(rs);
            DatabaseUtility.close(ps);
            conn.close();
        }

    }
    //}}}

    //{{{ Getters and Setters
    public int getId() { return this.id; }
    public void setId(int id) { this.id = id; }
    public int getLocation() { return this.location; }
    public void setLocation(int location) { this.location = location; }
    public String getName() { return this.name; }
    public void setName(String name) { this.name = name; }
    public int getAp() { return this.ap; }
    public void setAp(int ap) { this.ap = ap; }
    public int getApmax() { return this.apmax; }
    public void setApmax(int apmax) { this.apmax = apmax; }
    public int getCp() { return this.cp; }
    public void setCp(int cp) { this.cp = cp; }
    public int getHp() { return this.hp; }
    public void setHp(int hp) { this.hp = hp; }
    public int getHpmax() { return this.hpmax; }
    public void setHpmax(int hpmax) { this.hpmax = hpmax; }
    public void setEquippedWeapon(int item) { equippedWeapon = item; }
    public int getLocationType() { return this.locationType; }
    public void setLocationType(int locationType) { this.locationType = locationType; }

    //}}}

    public void unequipWeapon()
    {
        equippedWeapon = -1;
    }


    /**
     *  decrements the AP by count
     */
    public void decrementAp( InvasionConnection conn, int count )
    {
        try
        {
            int updateCount = conn.executeUpdate( "update alt set ap=ap-" + count + " where id = " + id );
            // log.finer("update alt set ap=ap-" + count + " where id = " + id);
            if( updateCount < 1 )
            {
                throw new RuntimeException("No AP was decremented");
            }
        }
        catch(SQLException e)
        {
            log.throwing( KEY, "Error decrementing AP for character " + id, e);
            throw new RuntimeException(e);
        }
    }


    /**
     *  um....kills off the character
     */
    public void die()
    {
        String query = "update alt set hp=0, ip=0, location=-1, ap=ap-level, where name=";
        InvasionConnection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try
        {
            conn = new InvasionConnection();
            ps = conn.prepareStatement(query);
            ps.setInt(1,id);
            rs = ps.executeQuery();
            if(!rs.next())
            {
                throw new RuntimeException("Lucky stiff, you didn't die.  The server insists you live.  But it's a bug...please report it.");
            }
            DatabaseUtility.close(rs);
            DatabaseUtility.close(ps);
        }
        catch(SQLException e)
        {
            log.throwing( KEY, "Exception killing character " + name, e);
            throw new RuntimeException(e);
        }
        finally
        {
            DatabaseUtility.close(rs);
            DatabaseUtility.close(ps);
            conn.close();
        }
    }


    /**
    *  stats: { "ip": 0, "hp":50, "xp": 9001, "ap": 50, "ticksalive": 190, "status": "drunk, dead, encumbered, no body, insane"},
     */
    public static JSONObject getStats( InvasionConnection conn, int altid )
    throws SQLException, JSONException
    {
        String query = "select hp, ip, ap, xp, ticksalive from alt where id=?";
        ResultSet rs = conn.psExecuteQuery( query, "Error retrieving character stats", altid );
        JSONObject obj = new JSONObject();
        if(rs.next())
        {
            obj.put("hp", rs.getInt("hp"));
            obj.put("ap", rs.getInt("ap"));
            obj.put("ip", rs.getInt("ip"));
            obj.put("xp", rs.getInt("xp"));
            obj.put("ticksalive", rs.getInt("ticksalive"));
        }
        return obj;
    }
}
// :wrap=none:noTabs=true:collapseFolds=1:maxLineLen=160:mode=java:tabSize=4:indentSize=4:noWordSep=_:folding=explicit:

