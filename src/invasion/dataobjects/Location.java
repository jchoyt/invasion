/*
 *  Copyright 2010 Jeffrey Hoyt.  All rights reserved.
 */
package invasion.dataobjects;

import java.util.logging.*;
import java.util.*;
import org.json.*;
import invasion.util.*;
import java.sql.*;


/**
 * Location generated by hbm2java
 */
public class Location  implements java.io.Serializable {

    //{{{ Logging
    public final static String KEY = Location.class.getName();
    public final static Logger log = Logger.getLogger( KEY );
    //}}}

    private int id;
    private int locationtype;
    private Integer station;
    private Integer level;
    private Integer x;
    private Integer y;
    private String name;
    private String description;
    private Set<Alt> alts = new HashSet<Alt>(0);

    //{{{ Constructors
    public Location() { }

    public Location(int id) {
        this.id = id; }
    //}}}

    //{{{ Methods
    /**
     * Returns all the occupants.  See the invasion.ui.Poll API for data format returned.
     * @see invasion.ui.Poll
     * @return  JSONArray full of occupants
     *
     */
    public static JSONArray getOccupants(InvasionConnection conn, int locid, Alt viewingCharacter)
    {
        String query = "select * from alt where location = ? and id != ? and ticksalive > 0";
        ResultSet rs = null;
        JSONArray root = new JSONArray();
        try
        {
            rs = conn.psExecuteQuery( query, "Retrieving Occupants for Poll", locid, viewingCharacter.getId() );
            while(rs.next())
            {
                JSONObject obj = new JSONObject();
                obj.put("name", rs.getString("name"));
                obj.put("id", rs.getInt("id"));
                obj.put("level", rs.getInt("level"));
                obj.put( "hp", Alt.calcHpCategory( rs.getInt("hp"), rs.getInt("hpmax") ) );
                //find the faction relationship (if any)
                int viewedFactionId = rs.getInt("factionid");
                String cssClass = FactionPolitics.getPolitics(viewingCharacter.getFactionId(), viewedFactionId).getCssClass();
                obj.put("cssclass", cssClass);

                root.put(obj);
            }
            DatabaseUtility.close(rs);
            return root;
        }
        catch(Exception e)
        {
            log.throwing( KEY, "Error adding occupants for Poll", e);
            throw new RuntimeException(e);
        }
        finally
        {
            DatabaseUtility.close(rs);
        }
    }


    /**
     * Returns all the information about a location except whether someone can recharge energy packs here
     * @param conn Currently open databse connection
     * @param locid Location to dump the informatoin about
     * @return JSONObject with all known information about a location
     *
     */
    public static JSONObject getSummary(InvasionConnection conn, int locid)
    {
        String query = "select t.name as basetype, s.name as station, l.name as tilename, x, y, level, description, l.id as locid, message, messagetype from location l join locationtype t on l.typeid=t.typeid join station s on l.station=s.id where l.id=?";
        ResultSet rs = null;
        JSONObject mainobj = new JSONObject();
        try
        {
            rs = conn.psExecuteQuery(query, "Error retrieving basic location information.", locid);
            String message = null;
            String messagetype = null;
            if(rs.next())
            {
                mainobj.put("type", rs.getString("basetype"));
                mainobj.put("station", rs.getString("station"));
                mainobj.put("level", rs.getString("level"));
                mainobj.put("locid", rs.getString("locid"));
                mainobj.put("x", rs.getInt("x"));
                mainobj.put("y", rs.getInt("y"));
                mainobj.put("name", rs.getString("tilename"));
                mainobj.put("description", rs.getString("description"));
                message = rs.getString("message");
                messagetype = rs.getString("messagetype");
                if( message != null && messagetype != null )
                {
                    mainobj.put( messagetype, message );
                }
                else
                    log.fine("Chalk message not put in " + message + messagetype );

            }
            else
                return null;
            DatabaseUtility.close(rs);
            //TODO get items
        }
        catch(SQLException e)
        {
            log.throwing( KEY, "a useful message", e);
            throw new RuntimeException(e);
        }
        finally
        {
            DatabaseUtility.close(rs);
            // mainobj.toString();
        }
        return mainobj;
    }


    /**
     * Returns all the information about a location
     * @param conn Currently open databse connection
     * @param who character to report data for
     * @return JSONObject with all known information about a location
     *
     */
    public static JSONObject getSummary(InvasionConnection conn, Alt who)
    {
        JSONObject mainobj = getSummary(conn, who.getLocation() );
        try
        {
            mainobj.put( "allowrecharage", Character.toString( canRecharge( who ) ) );
        }
        catch(JSONException e)
        {
            log.throwing( KEY, "a useful message", e);
            throw new RuntimeException(e);
        }
        finally
        {
            return mainobj;
        }

    }

    /**
     * Specify where an Energy Pack can be recharged.  Can recharge in
     * <ul><li>Security Outpost<li>
     * <li>Security Depot</li>
     * <li>Power Distribution</li>
     * <li>Armory</li></ul>
     * @param   who - from there we can get his current location
     * @return  't' for true, 'f' for false.  Makes it easier to put into JSON than converting from a boolean.
     *
     */
    public static char canRecharge( Alt who )
    {
        if( who.getLocationType() == 3 || who.getLocationType() == 15 || who.getLocationType() == 45 || who.getLocationType() == 46 )
        {
            return 't';
        }
        // if in stronghold
        return 'f';
    }

    /**
     *
     * @param   what  itemtype...cause it matters
     * @param   who from there we can get his current location
     * @return  't' for true, 'f' for false.  Makes it easier to put into JSON than converting from a boolean.
     *
     */
     public static boolean canRepair( Alt who, ItemType what )
     {
         //TODO fix this to actuall do something

         return true;
     }

    //}}}

    //{{{ Getters and Setters
    public int getId() { return this.id; }
    public void setId(int id) { this.id = id; }
    public int getLocationtype() { return this.locationtype; }
    public void setLocationtype(int locationtype) { this.locationtype = locationtype; }
    public Integer getStation() { return this.station; }
    public void setStation(Integer station) { this.station = station; }
    public Integer getLevel() { return this.level; }
    public void setLevel(Integer level) { this.level = level; }
    public Integer getX() { return this.x; }
    public void setX(Integer x) { this.x = x; }
    public Integer getY() { return this.y; }
    public void setY(Integer y) { this.y = y; }
    public String getName() { return this.name; }
    public void setName(String name) { this.name = name; }
    public String getDescription() { return this.description; }
    public void setDescription(String description) { this.description = description; }
    public Set<Alt> getAlts() { return this.alts; }
    public void setAlts(Set<Alt> alts) { this.alts = alts; }
    //}}}


}
// :wrap=none:noTabs=true:collapseFolds=1:folding=explicit:

